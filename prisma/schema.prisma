// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  passwordHash         String
  // was: role Role
  role                 String                @default("CANDIDATE") // 'ADMIN' | 'CANDIDATE'
  fullName             String
  phone                String?
  country              String?
  city                 String?
  createdAt            DateTime              @default(now())
  attempts             Attempt[]
  // was: kycStatus KycStatus?
  kycStatus            String?               @default("PENDING") // 'PENDING' | 'APPROVED' | 'REJECTED'
  identityVerification IdentityVerification?

  CandidateAgentLink CandidateAgentLink[]
}

model Question {
  id            String        @id @default(cuid())
  text          String
  // was: tag Level
  tag           String // 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2'
  allowMultiple Boolean       @default(false)
  options       Option[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  attemptItems  AttemptItem[]
  archived      Boolean       @default(false) // <— NEW
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  isCorrect  Boolean  @default(false)
  order      Int      @default(0)
}

model TestSettings {
  id             Int      @id @default(1)
  durationMin    Int      @default(30)
  // was: Json with dbgenerated default
  criteria       String   @default("{}") // JSON string
  resultCriteria String   @default("{}") // JSON string
  updatedAt      DateTime @updatedAt
}

model Attempt {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  startedAt     DateTime      @default(now())
  finishedAt    DateTime?
  status        String        @default("IN_PROGRESS") // 'AWAITING_START' | 'IN_PROGRESS' | 'SUBMITTED'
  items         AttemptItem[]
  level         String?
  certificateId String?
  issuedAt      DateTime?
  verifySlug    String?       @unique
  region        String?

  // you already have these fields from checkout/webhook work:
  paymentCurrencyCode String?
  paymentAmountCents  Int       @default(0)
  paidAt              DateTime?
  paymentStatus       String    @default("UNPAID") // 'UNPAID' | 'PAID' | 'REFUNDED'
  stripePaymentId     String?   @unique
  stripeSessionId     String?   @unique

  // NEW: manual per-attempt override (admin “Adjust Referral”)
  agentId String?
  agent   Agent?  @relation(fields: [agentId], references: [id], onDelete: SetNull)

  @@index([agentId], map: "idx_attempt_agent_override")
}

model AttemptItem {
  id        String  @id @default(cuid())
  attemptId String
  attempt   Attempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  allowMultiple Boolean @default(false)

  // JSON arrays stored as strings
  optionIds         String // JSON string of string[] (Option.id[])
  selectedOptionIds String @default("[]") // JSON string of string[]
  correctOptionIds  String // JSON string of string[]

  order Int @default(0)

  // After submission we mark item correctness:
  isCorrect Boolean?
}

model IdentityVerification {
  id         String    @id @default(cuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  selfieUrl  String
  idDocUrl   String
  // was: status KycStatus
  status     String    @default("PENDING") // 'PENDING' | 'APPROVED' | 'REJECTED'
  consentAt  DateTime
  createdAt  DateTime  @default(now())
  reviewedAt DateTime?
  reviewedBy String?
  notes      String?
}

model Agent {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  code              String   @unique
  commissionPercent Float    @default(0)
  currencyCode      String // <-- add this now: 'USD' | 'EUR' | 'PKR', etc.
  status            String   @default("ACTIVE")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  candidates CandidateAgentLink[]
  payouts    AgentPayout[]
  Attempt    Attempt[]

  @@index([status], map: "idx_agent_status")
  @@index([currencyCode], map: "idx_agent_currency")
}

model CandidateAgentLink {
  id          String @id @default(cuid())
  candidateId String @unique
  candidate   User   @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  linkedAt DateTime @default(now())
  source   String   @default("REGISTRATION") // 'REGISTRATION' | 'MANUAL'
}

model AgentPayout {
  id      String @id @default(cuid())
  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  amountCents Int
  notes       String? // e.g., "Paid on Date 09/10/2025"
  paidOnDate  DateTime? // optional field to mirror your screenshot line
  createdAt   DateTime  @default(now())
  createdBy   String? // admin user id or email
}
